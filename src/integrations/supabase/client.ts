// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL ?? '';
const SUPABASE_KEY =
  import.meta.env.VITE_SUPABASE_ANON_KEY ?? import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY ?? '';

if (!SUPABASE_URL || !SUPABASE_KEY) {
  // eslint-disable-next-line no-console
  console.warn(
    'Missing VITE_SUPABASE_URL or VITE_SUPABASE_ANON_KEY / VITE_SUPABASE_PUBLISHABLE_KEY in .env. Supabase calls will fail.'
  );
}

const browserStorage = typeof window !== 'undefined' ? localStorage : undefined;

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_KEY, {
  auth: {
    storage: browserStorage,
    persistSession: true,
    detectSessionInUrl: true,
  },
});

/**
 * Subscribe to auth state changes.
 * Returns an unsubscribe function.
 */
export const onAuthStateChange = (cb: (event: string, session: any) => void): (() => void) => {
  const { data } = supabase.auth.onAuthStateChange((event, session) => {
    try {
      cb(event, session);
    } catch {
      // ignore callback errors
    }
  });

  return () => {
    try {
      data?.subscription?.unsubscribe?.();
    } catch {
      /* ignore */
    }
  };
};

/**
 * Return currently authenticated user or null.
 */
export async function getCurrentUser() {
  try {
    const { data } = await supabase.auth.getUser();
    return data?.user ?? null;
  } catch {
    return null;
  }
}

/**
 * Return current user's id or null.
 */
export async function getUserId(): Promise<string | null> {
  try {
    const { data } = await supabase.auth.getUser();
    return data?.user?.id ?? null;
  } catch {
    return null;
  }
}

/**
 * Sign out the current user.
 */
export async function signOut() {
  try {
    await supabase.auth.signOut();
  } catch (err) {
    // swallow errors - callers can still inspect client state/logs
    // eslint-disable-next-line no-console
    console.error('signOut error', err);
  }
}